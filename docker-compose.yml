name: datp2k3_microservice
services:
  postgres:
    image: postgres:latest
    container_name: my_postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 14062003
    ports:
      - "5433:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - 4man_network

  redis:
    image: redis:latest
    container_name: my_redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - 4man_network

  kafka:
    image: bitnami/kafka:3.7.0
    container_name: my_kafka
    restart: always
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    ports:
      - "9094:9094"
    volumes:
      - kafka_data:/bitnami/kafka
    networks:
      - 4man_network

  elasticsearch:
    image: elasticsearch:8.17.3
    container_name: my_elasticsearch
    restart: always
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ELASTICSEARCH_URI=http://elasticsearch:9200
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: [ "CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -q '\"status\":\"green\"\\|\"status\":\"yellow\"'" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    networks:
      - 4man_network

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: my_keycloak
    restart: always
    command: ["start-dev"]
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://postgres:5432/keycloak_db
      - KC_DB_USERNAME=postgres
      - KC_DB_PASSWORD=14062003
    ports:
      - "8180:8080"
    volumes:
      - keycloak_data:/opt/keycloak/data
    depends_on:
      - postgres
    networks:
      - 4man_network

  sonarqube:
    image: sonarqube:latest
    container_name: my_sonarqube
    restart: always
    environment:
      - SONAR_JDBC_URL=jdbc:postgresql://postgres:5432/sonarqube_db
      - SONAR_JDBC_USERNAME=postgres
      - SONAR_JDBC_PASSWORD=14062003
    ports:
      - "9000:9000"
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    depends_on:
      - postgres
    networks:
      - 4man_network

  consul:
    image: hashicorp/consul:latest
    container_name: my_consul
    restart: always
    ports:
      - "8500:8500"
      - "8600:8600/udp"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8500/v1/status/leader" ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - 4man_network

  iam-service:
    build:
      context: ./iam
      dockerfile: Dockerfile
    container_name: my_iam_service
    image: datp2k3/iam_service
    restart: always
    ports:
      - "8888:8888"
    environment:
      - DBMS_CONNECTION=jdbc:postgresql://postgres:5432/iam_db2
      - DBMS_USERNAME=postgres
      - DBMS_PASSWORD=14062003
      - JWT_KEY_STORE_PASSWORD=@123Hello
      - IAM_CLIENT_ID=iam
      - IAM_CLIENT_SECRET=FEn2lOqmNg
      - GOOGLE_CLIENT_ID=204369626319-m0u86c2pqut8ne5amh5n9uejcpfiqmrp.apps.googleusercontent.com
      - GOOGLE_CLIENT_SECRET=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
      - KEYCLOAK_URL=http://keycloak:8080
      - KEYCLOAK_CLIENT_ID=iam_service
      - KEYCLOAK_CLIENT_SECRET=nYW29NN8ATLJ7UpQ9kfrAl35SlsTUWS8
      - KAFKA_HOST=kafka:9092
      - CONSUL_HOST=consul
      - REDIS_HOST=redis
      - STORAGE_SERVICE_URL=http://storage-service:8080
      - NOTIFICATION_URL=http://notification-service:3333
      - JWK_INTERNAL_URL=http://iam-service:8888/api/certificate/.well-known/jwks.json
      - JWK_SSO_URL=http://keycloak:8080/realms/IamService/protocol/openid-connect/certs
    depends_on:
      postgres:
        condition: service_healthy
      keycloak:
        condition: service_started
      redis:
        condition: service_started
      kafka:
        condition: service_started
      elasticsearch:
        condition: service_healthy
      consul:
        condition: service_healthy
    networks:
      - 4man_network

  storage-service:
    build:
      context: ./storage
      dockerfile: Dockerfile
    container_name: my_storage_service
    image: datp2k3/storage_service
    restart: always
    ports:
      - "8080:8080"
    environment:
      - DBMS_CONNECTION=jdbc:postgresql://postgres:5432/storage_db
      - DBMS_USERNAME=postgres
      - DBMS_PASSWORD=14062003
      - IAM_CLIENT_ID=iam
      - IAM_CLIENT_SECRET=FEn2lOqmNg
      - IAM_INTERNAL_URL=http://iam-service:8888
      - CONSUL_HOST=consul
      - REDIS_HOST=redis
      - KAFKA_HOST=kafka:9092
      - JWK_INTERNAL_URL=http://iam-service:8888/api/certificate/.well-known/jwks.json
      - JWK_SSO_URL=http://keycloak:8080/realms/IamService/protocol/openid-connect/certs
    depends_on:
      postgres:
        condition: service_healthy
      keycloak:
        condition: service_started
      redis:
        condition: service_started
      kafka:
        condition: service_started
      elasticsearch:
        condition: service_started
      consul:
        condition: service_healthy
    networks:
      - 4man_network

  notification-service:
    build:
      context: ./notification
      dockerfile: Dockerfile
    container_name: my_notification_service
    image: datp2k3/notification_service
    restart: always
    ports:
      - "3333:3333"
    environment:
      - DBMS_CONNECTION=jdbc:postgresql://postgres:5432/noti
      - DBMS_USERNAME=postgres
      - DBMS_PASSWORD=14062003
      - MAIL_USERNAME=testmailsender2k3@gmail.com
      - MAIL_PASSWORD=tbfyoopqxhoompgm
      - CONSUL_HOST=consul
      - KAFKA_HOST=kafka:9092
    depends_on:
      postgres:
        condition: service_healthy
      keycloak:
        condition: service_started
      redis:
        condition: service_started
      kafka:
        condition: service_started
      elasticsearch:
        condition: service_started
      consul:
        condition: service_healthy
    networks:
      - 4man_network

  gateway-service:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    container_name: my_gateway_service
    image: datp2k3/gateway_service
    restart: always
    ports:
      - "8686:8686"
    depends_on:
      postgres:
        condition: service_healthy
      keycloak:
        condition: service_started
      redis:
        condition: service_started
      kafka:
        condition: service_started
      elasticsearch:
        condition: service_started
      consul:
        condition: service_healthy
    networks:
      - 4man_network

  elasticsearch-service:
    build:
      context: ./elasticsearch
      dockerfile: Dockerfile
    container_name: my_elasticsearch_service
    image: datp2k3/elasticsearch_service
    restart: always
    ports:
      - "5555:5555"
    environment:
      - IAM_CLIENT_ID=iam
      - IAM_CLIENT_SECRET=FEn2lOqmNg
      - IAM_INTERNAL_URL=http://iam-service:8888
      - ELASTICSEARCH_URI=http://elasticsearch:9200
      - CONSUL_HOST=consul
      - KAFKA_HOST=kafka:9092
      - REDIS_HOST=redis
      - JWK_INTERNAL_URL=http://iam-service:8888/api/certificate/.well-known/jwks.json
      - JWK_SSO_URL=http://keycloak:8080/realms/IamService/protocol/openid-connect/certs
    depends_on:
      postgres:
        condition: service_healthy
      keycloak:
        condition: service_started
      redis:
        condition: service_started
      kafka:
        condition: service_started
      elasticsearch:
        condition: service_healthy
      consul:
        condition: service_healthy
    networks:
      - 4man_network

volumes:
  postgres_data:
  redis_data:
  kafka_data:
  elasticsearch_data:
  keycloak_data:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:

networks:
  4man_network: