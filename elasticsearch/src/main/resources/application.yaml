spring:
  application:
    name: elasticsearch-service
  main:
    banner-mode: off
    allow-bean-definition-overriding: true
  kafka:
    consumer:
      bootstrap-servers: ${KAFKA_HOST:localhost:9094}
      group-id: sync-data-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"
  security:
    oauth2:
      resourceserver:
        jwt:
          jwk-set-uris:
            internal: ${JWK_INTERNAL_URL:http://localhost:8888/api/certificate/.well-known/jwks.json}
            sso: ${JWK_SSO_URL:http://localhost:8180/realms/IamService/protocol/openid-connect/certs}

  cloud:
    consul:
      host: ${CONSUL_HOST:localhost}
      port: 8500
      discovery:
        enabled: true
        service-name: elasticsearch-service
        health-check-path: /actuator/health
        health-check-interval: 10s
        prefer-ip-address: true

  elasticsearch:
    uris: ${ELASTICSEARCH_URI:http://localhost:9200}

server:
  port: 5555

auth:
  keycloak-enabled: true

oauth:
  client:
    iam:
      client-id: ${IAM_CLIENT_ID:iam}
      client-secret: ${IAM_CLIENT_SECRET:FEn2lOqmNg}

redis:
  host: ${REDIS_HOST:localhost}
  port: 6379

app:
  iam:
    internal-url: ${IAM_INTERNAL_URL:http://localhost:8888}